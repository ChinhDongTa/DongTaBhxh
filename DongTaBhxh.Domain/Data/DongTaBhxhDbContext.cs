// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using DongTaBhxh.Domain.Models.EmployeeDb;
using Microsoft.EntityFrameworkCore;

namespace DongTaBhxh.Domain.Data;

public partial class DongTaBhxhDbContext : DbContext
{
    public DongTaBhxhDbContext()
    {
    }

    public DongTaBhxhDbContext(DbContextOptions<DongTaBhxhDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Department> Departments { get; set; }

    public virtual DbSet<Employee> Employees { get; set; }

    public virtual DbSet<Position> Positions { get; set; }

    public virtual DbSet<QuarterDepartmentRank> QuarterDepartmentRanks { get; set; }

    public virtual DbSet<QuarterEmployeeRank> QuarterEmployeeRanks { get; set; }

    public virtual DbSet<Reward> Rewards { get; set; }

    public virtual DbSet<SalaryCoefficient> SalaryCoefficients { get; set; }

//    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
//#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
//        => optionsBuilder.UseSqlServer("Data Source=10.64.244.130;Initial Catalog=DongTaBhxhDb;User ID=DongTa;Password=P@ssw0rd;Trust Server Certificate=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Department>(entity =>
        {
            entity.ToTable("Department");

            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.Name).HasMaxLength(300);
            entity.Property(e => e.Phone).HasMaxLength(50);
            entity.Property(e => e.ShortName).HasMaxLength(150);
            entity.HasOne(d => d.Level).WithMany(p => p.Departments)
                .HasForeignKey(d => d.LevelId)
                .HasConstraintName("FK_Department_Level");
        });

        modelBuilder.Entity<Employee>(entity =>
        {
            entity.ToTable("Employee");

            entity.Property(e => e.AccountBank).HasMaxLength(50);
            entity.Property(e => e.Address).HasMaxLength(200);
            entity.Property(e => e.Birthdate).HasColumnType("date");
            entity.Property(e => e.IdentityCard).HasMaxLength(20);
            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.FirstName).HasMaxLength(80);
            entity.Property(e => e.LastName).HasMaxLength(20);
            entity.Property(e => e.Phone).HasMaxLength(20);

            entity.HasOne(d => d.Dept).WithMany(p => p.Employees)
                .HasForeignKey(d => d.DeptId)
                .HasConstraintName("FK_Employee_Department");

            entity.HasOne(d => d.Post).WithMany(p => p.Employees)
                .HasForeignKey(d => d.PostId)
                .HasConstraintName("FK_Employee_Position");

            entity.HasOne(d => d.SalaryCoefficient).WithMany(p => p.Employees)
                .HasForeignKey(d => d.SalaryCoefficientId)
                .HasConstraintName("FK_Employee_SalaryCoefficient");
        });

        modelBuilder.Entity<Position>(entity =>
        {
            entity.ToTable("Position");

            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.Note).HasMaxLength(200);
            entity.Property(e => e.ShortName).HasMaxLength(10);
        });

        modelBuilder.Entity<Level>(entity =>
        {
            entity.ToTable("Level");

            entity.Property(e => e.Name).HasMaxLength(20);
            entity.Property(e => e.ShortName).HasMaxLength(50);
        });

        modelBuilder.Entity<QuarterDepartmentRank>(entity =>
        {
            entity.ToTable("QuarterDepartmentRank");

            entity.Property(e => e.Note).HasMaxLength(200);

            entity.HasOne(d => d.Dept).WithMany(p => p.QuarterDepartmentRanks)
                .HasForeignKey(d => d.DeptId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QuarterDepartmentRank_Department");

            entity.HasOne(d => d.Reward).WithMany(p => p.QuarterDepartmentRanks)
                .HasForeignKey(d => d.RewardId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QuarterDepartmentRank_Reward");
        });

        modelBuilder.Entity<QuarterEmployeeRank>(entity =>
        {
            entity.ToTable("QuarterEmployeeRank");

            entity.Property(e => e.Note).HasMaxLength(200);

            entity.HasOne(d => d.Employee).WithMany(p => p.QuarterEmployeeRanks)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QuarterEmployeeRank_Employee");

            entity.HasOne(d => d.Reward).WithMany(p => p.QuarterEmployeeRanks)
                .HasForeignKey(d => d.RewardId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QuarterEmployeeRank_Reward");
        });

        modelBuilder.Entity<Reward>(entity =>
        {
            entity.ToTable("Reward");

            entity.Property(e => e.Classify).HasMaxLength(4);
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.ShortName).HasMaxLength(50);
            entity.Property(e => e.Type).HasMaxLength(2);
        });

        modelBuilder.Entity<SalaryCoefficient>(entity =>
        {
            entity.ToTable("SalaryCoefficient");

            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Name).HasMaxLength(8);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}